from facebook import GraphAPI
from dotenv import load_dotenv
import os
import requests
from models.page import Page  # Assuming Page is defined in page.py
from database_init import db  # Assuming db is initialized in database_init.py
from sqlalchemy.exc import IntegrityError

# T·∫£i c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()

# L·∫•y ACCESS_TOKEN v√† PAGE_ID t·ª´ .env
ACCESS_TOKEN = os.getenv("ACCESS_TOKEN")  # Token truy c·∫≠p c·ªßa b·∫°n
PAGE_ID = os.getenv("PAGE_ID")  # ID c·ªßa Trang

# Kh·ªüi t·∫°o GraphAPI
graph = GraphAPI(access_token=ACCESS_TOKEN)

# N·ªôi dung b√†i vi·∫øt
post_message = "ƒê√¢y l√† b√†i ƒëƒÉng th·ª≠ nghi·ªám t·ª´ Python. üöÄ"


# ƒêƒÉng b√†i vi·∫øt
def create_post_page(page_id, access_token, message):
    try:
        graph.put_object(parent_object=page_id, connection_name="feed", message=message)
        print("B√†i ƒëƒÉng ƒë√£ ƒë∆∞·ª£c ƒëƒÉng th√†nh c√¥ng!")
    except Exception as e:
        print(f"L·ªói khi ƒëƒÉng b√†i vi·∫øt: {str(e)}")


def create_post_by_request(access_token):
    url = f"https://graph.facebook.com/v21.0/me?access_token={access_token}&debug=all&fields=accounts&format=json&method=get&origin_graph_explorer=1&pretty=0&suppress_http_code=1&transport=cors"
    try:
        response = requests.get(url, timeout=10)
        print(response.json())
    except requests.Timeout:
        print("Request timed out")
    except requests.RequestException as e:
        print(f"Error occurred: {str(e)}")


def get_access_token_page_by_id(page_id, access_token):
    try:
        url = f"https://graph.facebook.com/{page_id}?fields=access_token&access_token={access_token}"
        response = requests.get(url, timeout=10)
        return response.json().get("access_token")
    except requests.Timeout:
        print("Request timed out")
    except requests.RequestException as e:
        print(f"Error occurred: {str(e)}")


def get_account(access_token, facebook_account_id):
    try:
        # T·∫°o k·∫øt n·ªëi Graph API
        graph = GraphAPI(access_token=access_token)

        # L·∫•y danh s√°ch c√°c trang ƒë∆∞·ª£c qu·∫£n l√Ω
        response = graph.get_object("me/accounts")
        pages = response.get("data", [])

        if not pages:
            print("Kh√¥ng c√≥ trang n√†o ƒë∆∞·ª£c li√™n k·∫øt v·ªõi t√†i kho·∫£n n√†y.")
            return False

        print(f"ƒê√£ t√¨m th·∫•y {len(pages)} trang. ƒêang l∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu...")

        # K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu s·ª≠ d·ª•ng SQLAlchemy
        for page in pages:
            page_id = page.get("id")
            name = page.get("name")
            category = page.get("category", None)
            page_access_token = page.get("access_token")
            expires_at = None

            # Ki·ªÉm tra xem page_id c√≥ t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu ch∆∞a
            existing_page = Page.query.filter_by(page_id=page_id).first()

            if existing_page:
                # N·∫øu ƒë√£ t·ªìn t·∫°i, c·∫≠p nh·∫≠t th√¥ng tin c·ªßa trang
                existing_page.name = name
                existing_page.category = category
                existing_page.access_token = page_access_token
                existing_page.expires_at = expires_at
                existing_page.facebook_account_id = facebook_account_id
            else:
                # N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi m·ªôt b·∫£n ghi
                new_page = Page(
                    page_id=page_id,
                    name=name,
                    category=category,
                    access_token=page_access_token,
                    expires_at=expires_at,
                    facebook_account_id=facebook_account_id,
                )
                db.session.add(new_page)

        # X√°c nh·∫≠n thay ƒë·ªïi v√†o c∆° s·ªü d·ªØ li·ªáu
        db.session.commit()
        print("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!")

        return True

    except IntegrityError as e:
        db.session.rollback()  # Rollback n·∫øu c√≥ l·ªói IntegrityError
        print(f"L·ªói c∆° s·ªü d·ªØ li·ªáu: {e}")
        return False
    except Exception as e:
        print(f"ƒê√£ x·∫£y ra l·ªói: {e}")
        return False


# access_token_page = get_access_token_page_by_id(PAGE_ID)
# print(access_token_page)
# create_post_page(PAGE_ID, post_message)
