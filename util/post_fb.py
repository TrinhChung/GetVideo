from facebook import GraphAPI
from dotenv import load_dotenv
import os
import requests
from models.page import Page  # Assuming Page is defined in page.pyz
from database_init import db  # Assuming db is initialized in database_init.py
from sqlalchemy.exc import IntegrityError
from datetime import datetime
from flask import  flash
from requests.exceptions import RequestException
from urllib.parse import quote

# T·∫£i c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()

# L·∫•y ACCESS_TOKEN v√† PAGE_ID t·ª´ .env
ACCESS_TOKEN = os.getenv("ACCESS_TOKEN")  # Token truy c·∫≠p c·ªßa b·∫°n
PAGE_ID = os.getenv("PAGE_ID")  # ID c·ªßa Trang
APP_ID = os.getenv("APP_ID")

# N·ªôi dung b√†i vi·∫øt
post_message = "ƒê√¢y l√† b√†i ƒëƒÉng th·ª≠ nghi·ªám t·ª´ Python. üöÄ"


# ƒêƒÉng b√†i vi·∫øt
def create_post_page(page_id, access_token, message):
    # Kh·ªüi t·∫°o GraphAPI
    graph = GraphAPI(access_token=access_token)
    try:
        graph.put_object(parent_object=page_id, connection_name="feed", message=message)
        print("B√†i ƒëƒÉng ƒë√£ ƒë∆∞·ª£c ƒëƒÉng th√†nh c√¥ng!")
    except Exception as e:
        print(f"L·ªói khi ƒëƒÉng b√†i vi·∫øt: {str(e)}")


def create_video_post(page_id, access_token, video_path, message=""):
    """
    ƒêƒÉng video l√™n Facebook page theo c√∫ ph√°p ph√¢n t·∫£i video.

    Parameters:
    - page_id: ID c·ªßa trang Facebook
    - access_token: token truy c·∫≠p Facebook API
    - video_path: ƒê∆∞·ªùng d·∫´n t·ªõi file video
    - message: Tin nh·∫Øn k√®m video (t√πy ch·ªçn)
    """

    # Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa video
    if not os.path.exists(video_path):
        raise Exception(f"Video file kh√¥ng t·ªìn t·∫°i: {video_path}")

    # B∆∞·ªõc 1: T·∫°o phi√™n t·∫£i l√™n video
    file_name = os.path.basename(video_path)
    file_size = os.path.getsize(video_path)

    # URL cho vi·ªác t·∫°o phi√™n t·∫£i l√™n
    upload_url = f"https://graph-video.facebook.com/v21.0/{page_id}/videos"

    upload_session_id= None

    try:
        # G·ª≠i y√™u c·∫ßu POST ƒë·ªÉ t·∫°o phi√™n t·∫£i l√™n
        with open(video_path, 'rb') as video_file:
            files = {'file': video_file}
            payload = {
                'access_token': access_token,
                'description': message,
            }
        response = requests.post(UPLOAD_URL, data=payload, files=files)

        # L·∫•y ID c·ªßa phi√™n t·∫£i l√™n
        upload_session_id = response.json().get("id")

        if not upload_session_id:
            raise Exception("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c session ID cho phi√™n t·∫£i l√™n video.")

        print(f"Phi√™n t·∫£i l√™n video ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng: {upload_session_id}")

    except RequestException as e:
        raise Exception(f"L·ªói khi t·∫£i video l√™n: {e}")


def create_post_by_request(access_token):
    url = f"https://graph.facebook.com/v21.0/me?access_token={access_token}&debug=all&fields=accounts&format=json&method=get&origin_graph_explorer=1&pretty=0&suppress_http_code=1&transport=cors"
    try:
        response = requests.get(url, timeout=10)
        print(response.json())
    except requests.Timeout:
        print("Request timed out")
    except requests.RequestException as e:
        print(f"Error occurred: {str(e)}")


def get_access_token_page_by_id(page_id, access_token):
    try:
        url = f"https://graph.facebook.com/{page_id}?fields=access_token&access_token={access_token}"
        response = requests.get(url, timeout=10)
        return response.json().get("access_token")
    except requests.Timeout:
        print("Request timed out")
    except requests.RequestException as e:
        print(f"Error occurred: {str(e)}")


def get_account(access_token, facebook_account_id):
    try:
        # T·∫°o k·∫øt n·ªëi Graph API
        graph = GraphAPI(access_token=access_token)

        # L·∫•y danh s√°ch c√°c trang ƒë∆∞·ª£c qu·∫£n l√Ω
        response = graph.get_object("me/accounts")
        pages = response.get("data", [])

        if not pages:
            print("Kh√¥ng c√≥ trang n√†o ƒë∆∞·ª£c li√™n k·∫øt v·ªõi t√†i kho·∫£n n√†y.")
            return False

        print(f"ƒê√£ t√¨m th·∫•y {len(pages)} trang. ƒêang l∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu...")

        # K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu s·ª≠ d·ª•ng SQLAlchemy
        for page in pages:
            page_id = page.get("id")
            name = page.get("name")
            category = page.get("category", None)
            page_access_token = page.get("access_token")

            # L·∫•y expires_at t·ª´ get_token_data_from_facebook
            token_data, expires_at = get_token_data_from_facebook(page_access_token)

            if expires_at is None:
                expires_at = None  # N·∫øu kh√¥ng c√≥ expires_at, g√°n l√† None

            # Ki·ªÉm tra xem page_id c√≥ t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu ch∆∞a
            existing_page = Page.query.filter_by(page_id=page_id).first()

            if existing_page:
                # N·∫øu ƒë√£ t·ªìn t·∫°i, c·∫≠p nh·∫≠t th√¥ng tin c·ªßa trang
                existing_page.name = name
                existing_page.category = category
                existing_page.access_token = page_access_token
                existing_page.expires_at = expires_at
                existing_page.facebook_account_id = facebook_account_id
            else:
                # N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi m·ªôt b·∫£n ghi
                new_page = Page(
                    page_id=page_id,
                    name=name,
                    category=category,
                    access_token=page_access_token,
                    expires_at=expires_at,
                    facebook_account_id=facebook_account_id,
                )
                db.session.add(new_page)

        # X√°c nh·∫≠n thay ƒë·ªïi v√†o c∆° s·ªü d·ªØ li·ªáu
        db.session.commit()
        print("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!")

        return True

    except IntegrityError as e:
        db.session.rollback()  # Rollback n·∫øu c√≥ l·ªói IntegrityError
        print(f"L·ªói c∆° s·ªü d·ªØ li·ªáu: {e}")
        return False
    except Exception as e:
        print(f"ƒê√£ x·∫£y ra l·ªói: {e}")
        return False


def process_expires_at(token_data):
    """
    X·ª≠ l√Ω expires_at t·ª´ d·ªØ li·ªáu token c·ªßa Facebook.
    Tr·∫£ v·ªÅ th·ªùi gian h·∫øt h·∫°n ho·∫∑c None n·∫øu kh√¥ng c√≥ th·ªùi gian h·∫øt h·∫°n.
    """
    expires_at = token_data.get("expires_at", None)
    if expires_at == 0:
        expires_at = datetime(
            2100, 1, 1
        )  # N·∫øu expires_at = 0, ƒë·∫∑t ng√†y h·∫øt h·∫°n l√† nƒÉm 2100
    else:
        expires_at = datetime.fromtimestamp(expires_at) if expires_at else None
    return expires_at


def get_token_data_from_facebook(access_token):
    """
    G·ª≠i y√™u c·∫ßu ƒë·∫øn API c·ªßa Facebook ƒë·ªÉ ki·ªÉm tra th√¥ng tin v√† th·ªùi h·∫°n c·ªßa Access Token.
    Tr·∫£ v·ªÅ d·ªØ li·ªáu token ho·∫∑c None n·∫øu c√≥ l·ªói.
    """
    app_id = os.getenv("APP_ID")  # Thay b·∫±ng App ID c·ªßa b·∫°n
    app_secret = os.getenv("APP_SECRET")  # Thay b·∫±ng App Secret c·ªßa b·∫°n
    app_access_token = f"{app_id}|{app_secret}"

    # Endpoint ƒë·ªÉ debug token
    url = f"https://graph.facebook.com/debug_token?input_token={access_token}&access_token={app_access_token}"

    try:
        # G·ª≠i y√™u c·∫ßu
        response = requests.get(url, timeout=10)
        data = response.json()

        if "data" in data:
            token_data = data["data"]
            expires_at = process_expires_at(token_data)  # S·ª≠ d·ª•ng h√†m x·ª≠ l√Ω expires_at
            return token_data, expires_at
        else:
            print("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin token.")
            print(data)
            return None, None
    except requests.Timeout:
        print("Request timed out.")
    except requests.RequestException as e:
        print(f"L·ªói khi ki·ªÉm tra token: {str(e)}")
        return None, None


def check_token_expiry(access_token, page_id):
    """
    Ki·ªÉm tra th√¥ng tin v√† th·ªùi h·∫°n c·ªßa Access Token v√† c·∫≠p nh·∫≠t expires_at v√†o c∆° s·ªü d·ªØ li·ªáu.
    """
    try:
        # L·∫•y d·ªØ li·ªáu token t·ª´ Facebook
        token_data, expires_at = get_token_data_from_facebook(access_token)

        if token_data:
            is_valid = token_data.get("is_valid", False)

            print(f"Token h·ª£p l·ªá: {is_valid}")
            print(f"Expires_at: {expires_at}")

            # T√¨m page t∆∞∆°ng ·ª©ng v·ªõi page_id
            page = Page.query.filter_by(page_id=page_id).first()

            if page:
                # C·∫≠p nh·∫≠t expires_at v√†o b·∫£ng Page
                page.expires_at = expires_at
                db.session.commit()  # L∆∞u thay ƒë·ªïi v√†o c∆° s·ªü d·ªØ li·ªáu

                flash(
                    f"Token Debug Success and expires_at updated for page: {page.name}",
                    "success",
                )
            else:
                flash("Page not found.", "error")

            return token_data, expires_at
        else:
            print("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu token.")
            return None, None
    except Exception as e:
        print(f"L·ªói: {str(e)}")
        return None, None
